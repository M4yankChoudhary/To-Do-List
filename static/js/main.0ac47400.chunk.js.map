{"version":3,"sources":["components/ToDo.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoList","useState","currentTodo","setCurrentTodo","todos","setTodos","useEffect","localStorage","getItem","JSON","parse","autoFocus","className","value","onChange","e","target","onKeyPress","key","toDosArray","push","todo","isCompleted","setItem","stringify","createNewToDo","placeholder","map","index","onClick","completeToDo","todosArray","splice","deleteTodo","App","ToDo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAyEeA,MAvEf,WAAqB,IAAD,EAGsBC,mBAAS,IAH/B,mBAGTC,EAHS,KAGIC,EAHJ,OAIUF,mBAAS,IAJnB,mBAITG,EAJS,KAIFC,EAJE,KAoChB,OA9BAC,qBAAU,WAC0C,MAA7CC,aAAaC,QAAQ,sBACvBH,EAASI,KAAKC,MAAMH,aAAaC,QAAQ,yBAEzC,IA2BD,gCACI,2CACA,uBAAOG,WAAS,EACZC,UAAU,aACVC,MAAOX,EACPY,SAAW,SAAAC,GACPZ,EAAeY,EAAEC,OAAOH,QAG5BI,WAAY,SAAAF,GACK,UAAVA,EAAEG,OAnCrB,SAAuBhB,GACnB,IAAIiB,EAAU,YAAOf,GACrBe,EAAWC,KAAK,CACZC,KAAMnB,EACNoB,aAAa,IAEjBf,aAAagB,QAAQ,oBAAqBd,KAAKe,UAAUL,IACzDd,EAASI,KAAKC,MAAMH,aAAaC,QAAQ,uBA6BzBiB,CAAcvB,GACdC,EAAe,MAIvBuB,YAAY,0BAGftB,EAAMuB,KAAI,SAACN,EAAMO,GAAP,OACH,sBAAiBhB,UAAU,OAA3B,UACI,qBAAKA,UAAU,WAAWiB,QAAS,kBApCvD,SAAsBD,GAClB,IAAMT,EAAU,YAAOf,GACvBe,EAAWS,GAAON,aAAeH,EAAWS,GAAON,YACnDf,aAAagB,QAAQ,oBAAqBd,KAAKe,UAAUL,IACzDd,EAASI,KAAKC,MAAMH,aAAaC,QAAQ,uBAgCgBsB,CAAaF,IAAtD,SACKP,EAAKC,aAAe,4CAEzB,qBAAKV,UAAWS,EAAKC,YAAc,OAAS,GAA5C,SAAiDD,EAAKA,OAEtD,qBAAKT,UAAU,SAASiB,QAAS,kBAlCrD,SAAoBD,GAChB,IAAIG,EAAU,YAAO3B,GACrB2B,EAAWC,OAAOJ,EAAO,GACzBrB,aAAagB,QAAQ,oBAAqBd,KAAKe,UAAUO,IACzD1B,EAASI,KAAKC,MAAMH,aAAaC,QAAQ,uBA8BeyB,CAAWL,IAAnD,8BANMA,UC9CfM,MARf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACE,cAACuB,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0ac47400.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nfunction ToDoList() {\n\n\n    const [currentTodo, setCurrentTodo] = useState(\"\"); // set what user is typing\n    const [todos, setTodos] = useState([]);\n\n    useEffect(() => {\n        if(localStorage.getItem(\"localStorageArray\") != null) {\n         setTodos(JSON.parse(localStorage.getItem(\"localStorageArray\")));\n        }\n      }, [])\n    \n    function createNewToDo(currentTodo) {\n        let toDosArray = [...todos];\n        toDosArray.push({\n            todo: currentTodo,\n            isCompleted: false\n        });\n        localStorage.setItem(\"localStorageArray\", JSON.stringify(toDosArray));\n        setTodos(JSON.parse(localStorage.getItem(\"localStorageArray\")));\n    }\n\n    function completeToDo(index) {\n        const toDosArray = [...todos];\n        toDosArray[index].isCompleted = !toDosArray[index].isCompleted;\n        localStorage.setItem(\"localStorageArray\", JSON.stringify(toDosArray));\n        setTodos(JSON.parse(localStorage.getItem(\"localStorageArray\")));\n    }\n\n    function deleteTodo(index) {\n        let todosArray = [...todos];\n        todosArray.splice(index, 1);\n        localStorage.setItem(\"localStorageArray\", JSON.stringify(todosArray));\n        setTodos(JSON.parse(localStorage.getItem(\"localStorageArray\")));\n    }\n\n    return (\n        <div>\n            <h1>To-Do App</h1>\n            <input autoFocus\n                className=\"todo-input\"\n                value={currentTodo}\n                onChange={ e => {\n                    setCurrentTodo(e.target.value);\n                }}\n\n                onKeyPress={e => {\n                    if(e.key === 'Enter') {\n                        createNewToDo(currentTodo);\n                        setCurrentTodo(\"\");\n                    }\n                }}\n                \n                placeholder=\"Enter your task here!\"\n            />\n\n            {todos.map((todo, index) => (\n                    <div key={index} className=\"todo\">\n                        <div className=\"checkbox\" onClick={() => completeToDo(index)}>\n                            {todo.isCompleted && <span>&#x2714;</span>}\n                        </div>\n                        <div className={todo.isCompleted ? \"done\" : \"\"}>{todo.todo}</div>\n\n                        <div className=\"delete\" onClick={() =>  deleteTodo(index)}> &#128465; </div>    \n                    </div>\n            ))}\n            \n        </div>\n    );\n}\n\nexport default ToDoList;","//import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport ToDo from './components/ToDo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDo />\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}